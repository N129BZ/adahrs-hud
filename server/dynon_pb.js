/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.dynon.PB_BcastMsg', null, global);
goog.exportSymbol('proto.dynon.PB_BcastMsgType', null, global);
goog.exportSymbol('proto.dynon.PB_Capabilities', null, global);
goog.exportSymbol('proto.dynon.PB_Data_ADAHRS', null, global);
goog.exportSymbol('proto.dynon.PB_Data_FlightPlan', null, global);
goog.exportSymbol('proto.dynon.PB_Data_FplWpt', null, global);
goog.exportSymbol('proto.dynon.PB_Data_GPS', null, global);
goog.exportSymbol('proto.dynon.PB_Data_GeoPoint', null, global);
goog.exportSymbol('proto.dynon.PB_Data_StreamConfig', null, global);
goog.exportSymbol('proto.dynon.PB_Data_TransactionRequest', null, global);
goog.exportSymbol('proto.dynon.PB_Heartbeat', null, global);
goog.exportSymbol('proto.dynon.PB_TransactionReplyType', null, global);
goog.exportSymbol('proto.dynon.PB_TransactionRequestType', null, global);
goog.exportSymbol('proto.dynon.PB_WptType', null, global);
goog.exportSymbol('proto.dynon.PB_XingConstraintType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dynon.PB_BcastMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dynon.PB_BcastMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dynon.PB_BcastMsg.displayName = 'proto.dynon.PB_BcastMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dynon.PB_BcastMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.dynon.PB_BcastMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dynon.PB_BcastMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dynon.PB_BcastMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    systemId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    endpointUuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    msgType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    heartbeat: (f = msg.getHeartbeat()) && proto.dynon.PB_Heartbeat.toObject(includeInstance, f),
    dataGps: (f = msg.getDataGps()) && proto.dynon.PB_Data_GPS.toObject(includeInstance, f),
    dataAdahrs: (f = msg.getDataAdahrs()) && proto.dynon.PB_Data_ADAHRS.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dynon.PB_BcastMsg}
 */
proto.dynon.PB_BcastMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dynon.PB_BcastMsg;
  return proto.dynon.PB_BcastMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dynon.PB_BcastMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dynon.PB_BcastMsg}
 */
proto.dynon.PB_BcastMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndpointUuid(value);
      break;
    case 3:
      var value = /** @type {!proto.dynon.PB_BcastMsgType} */ (reader.readEnum());
      msg.setMsgType(value);
      break;
    case 4:
      var value = new proto.dynon.PB_Heartbeat;
      reader.readMessage(value,proto.dynon.PB_Heartbeat.deserializeBinaryFromReader);
      msg.setHeartbeat(value);
      break;
    case 5:
      var value = new proto.dynon.PB_Data_GPS;
      reader.readMessage(value,proto.dynon.PB_Data_GPS.deserializeBinaryFromReader);
      msg.setDataGps(value);
      break;
    case 6:
      var value = new proto.dynon.PB_Data_ADAHRS;
      reader.readMessage(value,proto.dynon.PB_Data_ADAHRS.deserializeBinaryFromReader);
      msg.setDataAdahrs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dynon.PB_BcastMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dynon.PB_BcastMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dynon.PB_BcastMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dynon.PB_BcastMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSystemId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEndpointUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMsgType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getHeartbeat();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.dynon.PB_Heartbeat.serializeBinaryToWriter
    );
  }
  f = message.getDataGps();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.dynon.PB_Data_GPS.serializeBinaryToWriter
    );
  }
  f = message.getDataAdahrs();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.dynon.PB_Data_ADAHRS.serializeBinaryToWriter
    );
  }
};


/**
 * optional string system_id = 1;
 * @return {string}
 */
proto.dynon.PB_BcastMsg.prototype.getSystemId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.dynon.PB_BcastMsg.prototype.setSystemId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string endpoint_uuid = 2;
 * @return {string}
 */
proto.dynon.PB_BcastMsg.prototype.getEndpointUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.dynon.PB_BcastMsg.prototype.setEndpointUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional PB_BcastMsgType msg_type = 3;
 * @return {!proto.dynon.PB_BcastMsgType}
 */
proto.dynon.PB_BcastMsg.prototype.getMsgType = function() {
  return /** @type {!proto.dynon.PB_BcastMsgType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.dynon.PB_BcastMsgType} value */
proto.dynon.PB_BcastMsg.prototype.setMsgType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional PB_Heartbeat heartbeat = 4;
 * @return {?proto.dynon.PB_Heartbeat}
 */
proto.dynon.PB_BcastMsg.prototype.getHeartbeat = function() {
  return /** @type{?proto.dynon.PB_Heartbeat} */ (
    jspb.Message.getWrapperField(this, proto.dynon.PB_Heartbeat, 4));
};


/** @param {?proto.dynon.PB_Heartbeat|undefined} value */
proto.dynon.PB_BcastMsg.prototype.setHeartbeat = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.dynon.PB_BcastMsg.prototype.clearHeartbeat = function() {
  this.setHeartbeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dynon.PB_BcastMsg.prototype.hasHeartbeat = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PB_Data_GPS data_gps = 5;
 * @return {?proto.dynon.PB_Data_GPS}
 */
proto.dynon.PB_BcastMsg.prototype.getDataGps = function() {
  return /** @type{?proto.dynon.PB_Data_GPS} */ (
    jspb.Message.getWrapperField(this, proto.dynon.PB_Data_GPS, 5));
};


/** @param {?proto.dynon.PB_Data_GPS|undefined} value */
proto.dynon.PB_BcastMsg.prototype.setDataGps = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.dynon.PB_BcastMsg.prototype.clearDataGps = function() {
  this.setDataGps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dynon.PB_BcastMsg.prototype.hasDataGps = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PB_Data_ADAHRS data_adahrs = 6;
 * @return {?proto.dynon.PB_Data_ADAHRS}
 */
proto.dynon.PB_BcastMsg.prototype.getDataAdahrs = function() {
  return /** @type{?proto.dynon.PB_Data_ADAHRS} */ (
    jspb.Message.getWrapperField(this, proto.dynon.PB_Data_ADAHRS, 6));
};


/** @param {?proto.dynon.PB_Data_ADAHRS|undefined} value */
proto.dynon.PB_BcastMsg.prototype.setDataAdahrs = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.dynon.PB_BcastMsg.prototype.clearDataAdahrs = function() {
  this.setDataAdahrs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dynon.PB_BcastMsg.prototype.hasDataAdahrs = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dynon.PB_Data_GPS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dynon.PB_Data_GPS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dynon.PB_Data_GPS.displayName = 'proto.dynon.PB_Data_GPS';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dynon.PB_Data_GPS.prototype.toObject = function(opt_includeInstance) {
  return proto.dynon.PB_Data_GPS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dynon.PB_Data_GPS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dynon.PB_Data_GPS.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    geo: (f = msg.getGeo()) && proto.dynon.PB_Data_GeoPoint.toObject(includeInstance, f),
    altM: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    gndTrkDrgt: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    magVarDeg: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    valid: jspb.Message.getFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dynon.PB_Data_GPS}
 */
proto.dynon.PB_Data_GPS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dynon.PB_Data_GPS;
  return proto.dynon.PB_Data_GPS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dynon.PB_Data_GPS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dynon.PB_Data_GPS}
 */
proto.dynon.PB_Data_GPS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = new proto.dynon.PB_Data_GeoPoint;
      reader.readMessage(value,proto.dynon.PB_Data_GeoPoint.deserializeBinaryFromReader);
      msg.setGeo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAltM(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGndTrkDrgt(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMagVarDeg(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dynon.PB_Data_GPS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dynon.PB_Data_GPS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dynon.PB_Data_GPS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dynon.PB_Data_GPS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getGeo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.dynon.PB_Data_GeoPoint.serializeBinaryToWriter
    );
  }
  f = message.getAltM();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getGndTrkDrgt();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getMagVarDeg();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getValid();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional int32 timestamp = 1;
 * @return {number}
 */
proto.dynon.PB_Data_GPS.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.dynon.PB_Data_GPS.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PB_Data_GeoPoint geo = 2;
 * @return {?proto.dynon.PB_Data_GeoPoint}
 */
proto.dynon.PB_Data_GPS.prototype.getGeo = function() {
  return /** @type{?proto.dynon.PB_Data_GeoPoint} */ (
    jspb.Message.getWrapperField(this, proto.dynon.PB_Data_GeoPoint, 2));
};


/** @param {?proto.dynon.PB_Data_GeoPoint|undefined} value */
proto.dynon.PB_Data_GPS.prototype.setGeo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.dynon.PB_Data_GPS.prototype.clearGeo = function() {
  this.setGeo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dynon.PB_Data_GPS.prototype.hasGeo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float alt_m = 3;
 * @return {number}
 */
proto.dynon.PB_Data_GPS.prototype.getAltM = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.dynon.PB_Data_GPS.prototype.setAltM = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float gnd_trk_drgt = 4;
 * @return {number}
 */
proto.dynon.PB_Data_GPS.prototype.getGndTrkDrgt = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.dynon.PB_Data_GPS.prototype.setGndTrkDrgt = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float mag_var_deg = 5;
 * @return {number}
 */
proto.dynon.PB_Data_GPS.prototype.getMagVarDeg = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.dynon.PB_Data_GPS.prototype.setMagVarDeg = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional bool valid = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dynon.PB_Data_GPS.prototype.getValid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.dynon.PB_Data_GPS.prototype.setValid = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dynon.PB_Data_GeoPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dynon.PB_Data_GeoPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dynon.PB_Data_GeoPoint.displayName = 'proto.dynon.PB_Data_GeoPoint';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dynon.PB_Data_GeoPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.dynon.PB_Data_GeoPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dynon.PB_Data_GeoPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dynon.PB_Data_GeoPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    lat: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    lon: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dynon.PB_Data_GeoPoint}
 */
proto.dynon.PB_Data_GeoPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dynon.PB_Data_GeoPoint;
  return proto.dynon.PB_Data_GeoPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dynon.PB_Data_GeoPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dynon.PB_Data_GeoPoint}
 */
proto.dynon.PB_Data_GeoPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dynon.PB_Data_GeoPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dynon.PB_Data_GeoPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dynon.PB_Data_GeoPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dynon.PB_Data_GeoPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getLon();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float lat = 1;
 * @return {number}
 */
proto.dynon.PB_Data_GeoPoint.prototype.getLat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.dynon.PB_Data_GeoPoint.prototype.setLat = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float lon = 2;
 * @return {number}
 */
proto.dynon.PB_Data_GeoPoint.prototype.getLon = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.dynon.PB_Data_GeoPoint.prototype.setLon = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dynon.PB_Data_ADAHRS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dynon.PB_Data_ADAHRS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dynon.PB_Data_ADAHRS.displayName = 'proto.dynon.PB_Data_ADAHRS';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dynon.PB_Data_ADAHRS.prototype.toObject = function(opt_includeInstance) {
  return proto.dynon.PB_Data_ADAHRS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dynon.PB_Data_ADAHRS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dynon.PB_Data_ADAHRS.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    milliseconds: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pitchValid: jspb.Message.getFieldWithDefault(msg, 3, false),
    pitchDeg: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    rollValid: jspb.Message.getFieldWithDefault(msg, 5, false),
    rollDeg: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    headingValid: jspb.Message.getFieldWithDefault(msg, 7, false),
    headingDegm: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    lateralAccelValid: jspb.Message.getFieldWithDefault(msg, 9, false),
    lateralAccel: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    altPresValid: jspb.Message.getFieldWithDefault(msg, 11, false),
    altPresMslM: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    altIndValid: jspb.Message.getFieldWithDefault(msg, 13, false),
    altIndMslM: +jspb.Message.getFieldWithDefault(msg, 14, 0.0),
    airspeedTrueValid: jspb.Message.getFieldWithDefault(msg, 15, false),
    airspeedTrueKts: +jspb.Message.getFieldWithDefault(msg, 16, 0.0),
    airspeedIndValid: jspb.Message.getFieldWithDefault(msg, 17, false),
    airspeedIndKts: +jspb.Message.getFieldWithDefault(msg, 18, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dynon.PB_Data_ADAHRS}
 */
proto.dynon.PB_Data_ADAHRS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dynon.PB_Data_ADAHRS;
  return proto.dynon.PB_Data_ADAHRS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dynon.PB_Data_ADAHRS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dynon.PB_Data_ADAHRS}
 */
proto.dynon.PB_Data_ADAHRS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMilliseconds(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPitchValid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPitchDeg(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRollValid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRollDeg(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHeadingValid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeadingDegm(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLateralAccelValid(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLateralAccel(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAltPresValid(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAltPresMslM(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAltIndValid(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAltIndMslM(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAirspeedTrueValid(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAirspeedTrueKts(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAirspeedIndValid(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAirspeedIndKts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dynon.PB_Data_ADAHRS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dynon.PB_Data_ADAHRS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dynon.PB_Data_ADAHRS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dynon.PB_Data_ADAHRS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMilliseconds();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPitchValid();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getPitchDeg();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getRollValid();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getRollDeg();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getHeadingValid();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getHeadingDegm();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getLateralAccelValid();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getLateralAccel();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getAltPresValid();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getAltPresMslM();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getAltIndValid();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getAltIndMslM();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = message.getAirspeedTrueValid();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getAirspeedTrueKts();
  if (f !== 0.0) {
    writer.writeFloat(
      16,
      f
    );
  }
  f = message.getAirspeedIndValid();
  if (f) {
    writer.writeBool(
      17,
      f
    );
  }
  f = message.getAirspeedIndKts();
  if (f !== 0.0) {
    writer.writeFloat(
      18,
      f
    );
  }
};


/**
 * optional int32 timestamp = 1;
 * @return {number}
 */
proto.dynon.PB_Data_ADAHRS.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.dynon.PB_Data_ADAHRS.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 milliseconds = 2;
 * @return {number}
 */
proto.dynon.PB_Data_ADAHRS.prototype.getMilliseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.dynon.PB_Data_ADAHRS.prototype.setMilliseconds = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool pitch_valid = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dynon.PB_Data_ADAHRS.prototype.getPitchValid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.dynon.PB_Data_ADAHRS.prototype.setPitchValid = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional float pitch_deg = 4;
 * @return {number}
 */
proto.dynon.PB_Data_ADAHRS.prototype.getPitchDeg = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.dynon.PB_Data_ADAHRS.prototype.setPitchDeg = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional bool roll_valid = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dynon.PB_Data_ADAHRS.prototype.getRollValid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.dynon.PB_Data_ADAHRS.prototype.setRollValid = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional float roll_deg = 6;
 * @return {number}
 */
proto.dynon.PB_Data_ADAHRS.prototype.getRollDeg = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.dynon.PB_Data_ADAHRS.prototype.setRollDeg = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional bool heading_valid = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dynon.PB_Data_ADAHRS.prototype.getHeadingValid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.dynon.PB_Data_ADAHRS.prototype.setHeadingValid = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional float heading_degm = 8;
 * @return {number}
 */
proto.dynon.PB_Data_ADAHRS.prototype.getHeadingDegm = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.dynon.PB_Data_ADAHRS.prototype.setHeadingDegm = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional bool lateral_accel_valid = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dynon.PB_Data_ADAHRS.prototype.getLateralAccelValid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.dynon.PB_Data_ADAHRS.prototype.setLateralAccelValid = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional float lateral_accel = 10;
 * @return {number}
 */
proto.dynon.PB_Data_ADAHRS.prototype.getLateralAccel = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.dynon.PB_Data_ADAHRS.prototype.setLateralAccel = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional bool alt_pres_valid = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dynon.PB_Data_ADAHRS.prototype.getAltPresValid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.dynon.PB_Data_ADAHRS.prototype.setAltPresValid = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional float alt_pres_msl_m = 12;
 * @return {number}
 */
proto.dynon.PB_Data_ADAHRS.prototype.getAltPresMslM = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.dynon.PB_Data_ADAHRS.prototype.setAltPresMslM = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional bool alt_ind_valid = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dynon.PB_Data_ADAHRS.prototype.getAltIndValid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.dynon.PB_Data_ADAHRS.prototype.setAltIndValid = function(value) {
  jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional float alt_ind_msl_m = 14;
 * @return {number}
 */
proto.dynon.PB_Data_ADAHRS.prototype.getAltIndMslM = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.dynon.PB_Data_ADAHRS.prototype.setAltIndMslM = function(value) {
  jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional bool airspeed_true_valid = 15;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dynon.PB_Data_ADAHRS.prototype.getAirspeedTrueValid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 15, false));
};


/** @param {boolean} value */
proto.dynon.PB_Data_ADAHRS.prototype.setAirspeedTrueValid = function(value) {
  jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional float airspeed_true_kts = 16;
 * @return {number}
 */
proto.dynon.PB_Data_ADAHRS.prototype.getAirspeedTrueKts = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 16, 0.0));
};


/** @param {number} value */
proto.dynon.PB_Data_ADAHRS.prototype.setAirspeedTrueKts = function(value) {
  jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional bool airspeed_ind_valid = 17;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dynon.PB_Data_ADAHRS.prototype.getAirspeedIndValid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 17, false));
};


/** @param {boolean} value */
proto.dynon.PB_Data_ADAHRS.prototype.setAirspeedIndValid = function(value) {
  jspb.Message.setProto3BooleanField(this, 17, value);
};


/**
 * optional float airspeed_ind_kts = 18;
 * @return {number}
 */
proto.dynon.PB_Data_ADAHRS.prototype.getAirspeedIndKts = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 18, 0.0));
};


/** @param {number} value */
proto.dynon.PB_Data_ADAHRS.prototype.setAirspeedIndKts = function(value) {
  jspb.Message.setProto3FloatField(this, 18, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dynon.PB_Heartbeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dynon.PB_Heartbeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dynon.PB_Heartbeat.displayName = 'proto.dynon.PB_Heartbeat';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dynon.PB_Heartbeat.prototype.toObject = function(opt_includeInstance) {
  return proto.dynon.PB_Heartbeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dynon.PB_Heartbeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dynon.PB_Heartbeat.toObject = function(includeInstance, msg) {
  var f, obj = {
    systemId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ipAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ipPort: jspb.Message.getFieldWithDefault(msg, 4, 0),
    isEfis: jspb.Message.getFieldWithDefault(msg, 5, false),
    capabilities: (f = msg.getCapabilities()) && proto.dynon.PB_Capabilities.toObject(includeInstance, f),
    prodMake: jspb.Message.getFieldWithDefault(msg, 7, ""),
    prodName: jspb.Message.getFieldWithDefault(msg, 8, ""),
    prodModel: jspb.Message.getFieldWithDefault(msg, 9, ""),
    prodSerial: jspb.Message.getFieldWithDefault(msg, 10, ""),
    prodFirmware: jspb.Message.getFieldWithDefault(msg, 11, ""),
    hostname: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dynon.PB_Heartbeat}
 */
proto.dynon.PB_Heartbeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dynon.PB_Heartbeat;
  return proto.dynon.PB_Heartbeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dynon.PB_Heartbeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dynon.PB_Heartbeat}
 */
proto.dynon.PB_Heartbeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpAddress(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIpPort(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsEfis(value);
      break;
    case 6:
      var value = new proto.dynon.PB_Capabilities;
      reader.readMessage(value,proto.dynon.PB_Capabilities.deserializeBinaryFromReader);
      msg.setCapabilities(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setProdMake(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setProdName(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setProdModel(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setProdSerial(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setProdFirmware(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dynon.PB_Heartbeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dynon.PB_Heartbeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dynon.PB_Heartbeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dynon.PB_Heartbeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSystemId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getIpAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIpPort();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getIsEfis();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getCapabilities();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.dynon.PB_Capabilities.serializeBinaryToWriter
    );
  }
  f = message.getProdMake();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getProdName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getProdModel();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getProdSerial();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getProdFirmware();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getHostname();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string system_id = 1;
 * @return {string}
 */
proto.dynon.PB_Heartbeat.prototype.getSystemId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.dynon.PB_Heartbeat.prototype.setSystemId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 timestamp = 2;
 * @return {number}
 */
proto.dynon.PB_Heartbeat.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.dynon.PB_Heartbeat.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string ip_address = 3;
 * @return {string}
 */
proto.dynon.PB_Heartbeat.prototype.getIpAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.dynon.PB_Heartbeat.prototype.setIpAddress = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 ip_port = 4;
 * @return {number}
 */
proto.dynon.PB_Heartbeat.prototype.getIpPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.dynon.PB_Heartbeat.prototype.setIpPort = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool is_efis = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dynon.PB_Heartbeat.prototype.getIsEfis = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.dynon.PB_Heartbeat.prototype.setIsEfis = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional PB_Capabilities capabilities = 6;
 * @return {?proto.dynon.PB_Capabilities}
 */
proto.dynon.PB_Heartbeat.prototype.getCapabilities = function() {
  return /** @type{?proto.dynon.PB_Capabilities} */ (
    jspb.Message.getWrapperField(this, proto.dynon.PB_Capabilities, 6));
};


/** @param {?proto.dynon.PB_Capabilities|undefined} value */
proto.dynon.PB_Heartbeat.prototype.setCapabilities = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.dynon.PB_Heartbeat.prototype.clearCapabilities = function() {
  this.setCapabilities(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dynon.PB_Heartbeat.prototype.hasCapabilities = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string prod_make = 7;
 * @return {string}
 */
proto.dynon.PB_Heartbeat.prototype.getProdMake = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.dynon.PB_Heartbeat.prototype.setProdMake = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string prod_name = 8;
 * @return {string}
 */
proto.dynon.PB_Heartbeat.prototype.getProdName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.dynon.PB_Heartbeat.prototype.setProdName = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string prod_model = 9;
 * @return {string}
 */
proto.dynon.PB_Heartbeat.prototype.getProdModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.dynon.PB_Heartbeat.prototype.setProdModel = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string prod_serial = 10;
 * @return {string}
 */
proto.dynon.PB_Heartbeat.prototype.getProdSerial = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.dynon.PB_Heartbeat.prototype.setProdSerial = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string prod_firmware = 11;
 * @return {string}
 */
proto.dynon.PB_Heartbeat.prototype.getProdFirmware = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.dynon.PB_Heartbeat.prototype.setProdFirmware = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string hostname = 12;
 * @return {string}
 */
proto.dynon.PB_Heartbeat.prototype.getHostname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.dynon.PB_Heartbeat.prototype.setHostname = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dynon.PB_Capabilities = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dynon.PB_Capabilities, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dynon.PB_Capabilities.displayName = 'proto.dynon.PB_Capabilities';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dynon.PB_Capabilities.prototype.toObject = function(opt_includeInstance) {
  return proto.dynon.PB_Capabilities.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dynon.PB_Capabilities} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dynon.PB_Capabilities.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, false),
    gps: jspb.Message.getFieldWithDefault(msg, 2, false),
    ahrs: jspb.Message.getFieldWithDefault(msg, 3, false),
    adahrs: jspb.Message.getFieldWithDefault(msg, 4, false),
    fplSend: jspb.Message.getFieldWithDefault(msg, 5, false),
    fplReceive: jspb.Message.getFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dynon.PB_Capabilities}
 */
proto.dynon.PB_Capabilities.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dynon.PB_Capabilities;
  return proto.dynon.PB_Capabilities.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dynon.PB_Capabilities} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dynon.PB_Capabilities}
 */
proto.dynon.PB_Capabilities.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGps(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAhrs(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdahrs(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFplSend(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFplReceive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dynon.PB_Capabilities.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dynon.PB_Capabilities.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dynon.PB_Capabilities} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dynon.PB_Capabilities.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getGps();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getAhrs();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getAdahrs();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getFplSend();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getFplReceive();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional bool status = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dynon.PB_Capabilities.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.dynon.PB_Capabilities.prototype.setStatus = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool gps = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dynon.PB_Capabilities.prototype.getGps = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.dynon.PB_Capabilities.prototype.setGps = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool ahrs = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dynon.PB_Capabilities.prototype.getAhrs = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.dynon.PB_Capabilities.prototype.setAhrs = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool adahrs = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dynon.PB_Capabilities.prototype.getAdahrs = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.dynon.PB_Capabilities.prototype.setAdahrs = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool fpl_send = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dynon.PB_Capabilities.prototype.getFplSend = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.dynon.PB_Capabilities.prototype.setFplSend = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool fpl_receive = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dynon.PB_Capabilities.prototype.getFplReceive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.dynon.PB_Capabilities.prototype.setFplReceive = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dynon.PB_Data_FlightPlan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dynon.PB_Data_FlightPlan.repeatedFields_, null);
};
goog.inherits(proto.dynon.PB_Data_FlightPlan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dynon.PB_Data_FlightPlan.displayName = 'proto.dynon.PB_Data_FlightPlan';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dynon.PB_Data_FlightPlan.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dynon.PB_Data_FlightPlan.prototype.toObject = function(opt_includeInstance) {
  return proto.dynon.PB_Data_FlightPlan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dynon.PB_Data_FlightPlan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dynon.PB_Data_FlightPlan.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    activeIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    waypointList: jspb.Message.toObjectList(msg.getWaypointList(),
    proto.dynon.PB_Data_FplWpt.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dynon.PB_Data_FlightPlan}
 */
proto.dynon.PB_Data_FlightPlan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dynon.PB_Data_FlightPlan;
  return proto.dynon.PB_Data_FlightPlan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dynon.PB_Data_FlightPlan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dynon.PB_Data_FlightPlan}
 */
proto.dynon.PB_Data_FlightPlan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActiveIndex(value);
      break;
    case 3:
      var value = new proto.dynon.PB_Data_FplWpt;
      reader.readMessage(value,proto.dynon.PB_Data_FplWpt.deserializeBinaryFromReader);
      msg.addWaypoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dynon.PB_Data_FlightPlan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dynon.PB_Data_FlightPlan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dynon.PB_Data_FlightPlan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dynon.PB_Data_FlightPlan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActiveIndex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getWaypointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.dynon.PB_Data_FplWpt.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.dynon.PB_Data_FlightPlan.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.dynon.PB_Data_FlightPlan.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 active_index = 2;
 * @return {number}
 */
proto.dynon.PB_Data_FlightPlan.prototype.getActiveIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.dynon.PB_Data_FlightPlan.prototype.setActiveIndex = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated PB_Data_FplWpt waypoint = 3;
 * @return {!Array<!proto.dynon.PB_Data_FplWpt>}
 */
proto.dynon.PB_Data_FlightPlan.prototype.getWaypointList = function() {
  return /** @type{!Array<!proto.dynon.PB_Data_FplWpt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dynon.PB_Data_FplWpt, 3));
};


/** @param {!Array<!proto.dynon.PB_Data_FplWpt>} value */
proto.dynon.PB_Data_FlightPlan.prototype.setWaypointList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.dynon.PB_Data_FplWpt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dynon.PB_Data_FplWpt}
 */
proto.dynon.PB_Data_FlightPlan.prototype.addWaypoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.dynon.PB_Data_FplWpt, opt_index);
};


proto.dynon.PB_Data_FlightPlan.prototype.clearWaypointList = function() {
  this.setWaypointList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dynon.PB_Data_FplWpt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dynon.PB_Data_FplWpt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dynon.PB_Data_FplWpt.displayName = 'proto.dynon.PB_Data_FplWpt';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dynon.PB_Data_FplWpt.prototype.toObject = function(opt_includeInstance) {
  return proto.dynon.PB_Data_FplWpt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dynon.PB_Data_FplWpt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dynon.PB_Data_FplWpt.toObject = function(includeInstance, msg) {
  var f, obj = {
    ident: jspb.Message.getFieldWithDefault(msg, 1, ""),
    geo: (f = msg.getGeo()) && proto.dynon.PB_Data_GeoPoint.toObject(includeInstance, f),
    waypointType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    elevation: jspb.Message.getFieldWithDefault(msg, 5, 0),
    xingAlt: jspb.Message.getFieldWithDefault(msg, 6, 0),
    xingConstraint: jspb.Message.getFieldWithDefault(msg, 7, 0),
    xingAlongTrkoffset: +jspb.Message.getFieldWithDefault(msg, 8, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dynon.PB_Data_FplWpt}
 */
proto.dynon.PB_Data_FplWpt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dynon.PB_Data_FplWpt;
  return proto.dynon.PB_Data_FplWpt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dynon.PB_Data_FplWpt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dynon.PB_Data_FplWpt}
 */
proto.dynon.PB_Data_FplWpt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdent(value);
      break;
    case 2:
      var value = new proto.dynon.PB_Data_GeoPoint;
      reader.readMessage(value,proto.dynon.PB_Data_GeoPoint.deserializeBinaryFromReader);
      msg.setGeo(value);
      break;
    case 3:
      var value = /** @type {!proto.dynon.PB_WptType} */ (reader.readEnum());
      msg.setWaypointType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setElevation(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setXingAlt(value);
      break;
    case 7:
      var value = /** @type {!proto.dynon.PB_XingConstraintType} */ (reader.readEnum());
      msg.setXingConstraint(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setXingAlongTrkoffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dynon.PB_Data_FplWpt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dynon.PB_Data_FplWpt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dynon.PB_Data_FplWpt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dynon.PB_Data_FplWpt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGeo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.dynon.PB_Data_GeoPoint.serializeBinaryToWriter
    );
  }
  f = message.getWaypointType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getElevation();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getXingAlt();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getXingConstraint();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getXingAlongTrkoffset();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
};


/**
 * optional string ident = 1;
 * @return {string}
 */
proto.dynon.PB_Data_FplWpt.prototype.getIdent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.dynon.PB_Data_FplWpt.prototype.setIdent = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PB_Data_GeoPoint geo = 2;
 * @return {?proto.dynon.PB_Data_GeoPoint}
 */
proto.dynon.PB_Data_FplWpt.prototype.getGeo = function() {
  return /** @type{?proto.dynon.PB_Data_GeoPoint} */ (
    jspb.Message.getWrapperField(this, proto.dynon.PB_Data_GeoPoint, 2));
};


/** @param {?proto.dynon.PB_Data_GeoPoint|undefined} value */
proto.dynon.PB_Data_FplWpt.prototype.setGeo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.dynon.PB_Data_FplWpt.prototype.clearGeo = function() {
  this.setGeo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dynon.PB_Data_FplWpt.prototype.hasGeo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PB_WptType waypoint_type = 3;
 * @return {!proto.dynon.PB_WptType}
 */
proto.dynon.PB_Data_FplWpt.prototype.getWaypointType = function() {
  return /** @type {!proto.dynon.PB_WptType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.dynon.PB_WptType} value */
proto.dynon.PB_Data_FplWpt.prototype.setWaypointType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.dynon.PB_Data_FplWpt.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.dynon.PB_Data_FplWpt.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 elevation = 5;
 * @return {number}
 */
proto.dynon.PB_Data_FplWpt.prototype.getElevation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.dynon.PB_Data_FplWpt.prototype.setElevation = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 xing_alt = 6;
 * @return {number}
 */
proto.dynon.PB_Data_FplWpt.prototype.getXingAlt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.dynon.PB_Data_FplWpt.prototype.setXingAlt = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional PB_XingConstraintType xing_constraint = 7;
 * @return {!proto.dynon.PB_XingConstraintType}
 */
proto.dynon.PB_Data_FplWpt.prototype.getXingConstraint = function() {
  return /** @type {!proto.dynon.PB_XingConstraintType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.dynon.PB_XingConstraintType} value */
proto.dynon.PB_Data_FplWpt.prototype.setXingConstraint = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional float xing_along_trkoffset = 8;
 * @return {number}
 */
proto.dynon.PB_Data_FplWpt.prototype.getXingAlongTrkoffset = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.dynon.PB_Data_FplWpt.prototype.setXingAlongTrkoffset = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dynon.PB_Data_StreamConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dynon.PB_Data_StreamConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dynon.PB_Data_StreamConfig.displayName = 'proto.dynon.PB_Data_StreamConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dynon.PB_Data_StreamConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.dynon.PB_Data_StreamConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dynon.PB_Data_StreamConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dynon.PB_Data_StreamConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    gpsFreqHz: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    adahrsFreqHz: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dynon.PB_Data_StreamConfig}
 */
proto.dynon.PB_Data_StreamConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dynon.PB_Data_StreamConfig;
  return proto.dynon.PB_Data_StreamConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dynon.PB_Data_StreamConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dynon.PB_Data_StreamConfig}
 */
proto.dynon.PB_Data_StreamConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGpsFreqHz(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAdahrsFreqHz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dynon.PB_Data_StreamConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dynon.PB_Data_StreamConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dynon.PB_Data_StreamConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dynon.PB_Data_StreamConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGpsFreqHz();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getAdahrsFreqHz();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float gps_freq_hz = 1;
 * @return {number}
 */
proto.dynon.PB_Data_StreamConfig.prototype.getGpsFreqHz = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.dynon.PB_Data_StreamConfig.prototype.setGpsFreqHz = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float adahrs_freq_hz = 2;
 * @return {number}
 */
proto.dynon.PB_Data_StreamConfig.prototype.getAdahrsFreqHz = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.dynon.PB_Data_StreamConfig.prototype.setAdahrsFreqHz = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dynon.PB_Data_TransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dynon.PB_Data_TransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dynon.PB_Data_TransactionRequest.displayName = 'proto.dynon.PB_Data_TransactionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dynon.PB_Data_TransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dynon.PB_Data_TransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dynon.PB_Data_TransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dynon.PB_Data_TransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionRequestType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    payloadLength: jspb.Message.getFieldWithDefault(msg, 2, 0),
    filename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fetchIndex: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dynon.PB_Data_TransactionRequest}
 */
proto.dynon.PB_Data_TransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dynon.PB_Data_TransactionRequest;
  return proto.dynon.PB_Data_TransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dynon.PB_Data_TransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dynon.PB_Data_TransactionRequest}
 */
proto.dynon.PB_Data_TransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.dynon.PB_TransactionRequestType} */ (reader.readEnum());
      msg.setTransactionRequestType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPayloadLength(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFetchIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dynon.PB_Data_TransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dynon.PB_Data_TransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dynon.PB_Data_TransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dynon.PB_Data_TransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionRequestType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPayloadLength();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFetchIndex();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional PB_TransactionRequestType transaction_request_type = 1;
 * @return {!proto.dynon.PB_TransactionRequestType}
 */
proto.dynon.PB_Data_TransactionRequest.prototype.getTransactionRequestType = function() {
  return /** @type {!proto.dynon.PB_TransactionRequestType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.dynon.PB_TransactionRequestType} value */
proto.dynon.PB_Data_TransactionRequest.prototype.setTransactionRequestType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 payload_length = 2;
 * @return {number}
 */
proto.dynon.PB_Data_TransactionRequest.prototype.getPayloadLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.dynon.PB_Data_TransactionRequest.prototype.setPayloadLength = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string filename = 3;
 * @return {string}
 */
proto.dynon.PB_Data_TransactionRequest.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.dynon.PB_Data_TransactionRequest.prototype.setFilename = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 fetch_index = 4;
 * @return {number}
 */
proto.dynon.PB_Data_TransactionRequest.prototype.getFetchIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.dynon.PB_Data_TransactionRequest.prototype.setFetchIndex = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.dynon.PB_BcastMsgType = {
  BCASTMSGTYPE_EMPTY: 0,
  BCASTMSGTYPE_HEARTBEAT: 1,
  BCASTMSGTYPE_DATA_GPS: 2,
  BCASTMSGTYPE_DATA_ADAHRS: 3
};

/**
 * @enum {number}
 */
proto.dynon.PB_WptType = {
  WPTTYPE_UNKNOWN: 0,
  WPTTYPE_AIRPORT: 1,
  WPTTYPE_VOR: 2,
  WPTTYPE_NDB: 3,
  WPTTYPE_USER: 4,
  WPTTYPE_LOCALIZER: 5,
  WPTTYPE_VRP: 6,
  WPTTYPE_FIX: 7,
  WPTTYPE_LATLON: 8,
  WPTTYPE_PRESENTPOSITIONLATLON: 9
};

/**
 * @enum {number}
 */
proto.dynon.PB_XingConstraintType = {
  XINGCONSTRAINTTYPE_NONE: 0,
  XINGCONSTRAINTTYPE_UNKNOWN: 1,
  XINGCONSTRAINTTYPE_AT: 2,
  XINGCONSTRAINTTYPE_ABOVE: 3,
  XINGCONSTRAINTTYPE_BELOW: 4
};

/**
 * @enum {number}
 */
proto.dynon.PB_TransactionRequestType = {
  TRANSACTIONREQUESTTYPE_UNKNOWN: 0,
  TRANSACTIONREQUESTTYPE_STREAMCONFIG_PUSH: 1,
  TRANSACTIONREQUESTTYPE_FLIGHTPLAN_PUSH: 2,
  TRANSACTIONREQUESTTYPE_FLIGHTPLAN_PULL: 3,
  TRANSACTIONREQUESTTYPE_TRACKLOG_INVENTORY: 4,
  TRANSACTIONREQUESTTYPE_TRACKLOG_FETCH: 5
};

/**
 * @enum {number}
 */
proto.dynon.PB_TransactionReplyType = {
  TRANSACTIONREPLYTYPE_UNKNOWN: 0,
  TRANSACTIONREPLYTYPE_SUCCESS: 1,
  TRANSACTIONREPLYTYPE_REQUESTNOTUNDERSTOOD: 2,
  TRANSACTIONREPLYTYPE_REQUESTNOTPERMITTED: 3,
  TRANSACTIONREPLYTYPE_REQUESTFAILED: 4,
  TRANSACTIONREPLYTYPE_CONNECTTIMEDOUT: 5,
  TRANSACTIONREPLYTYPE_CONNECTIONERROR: 6,
  TRANSACTIONREPLYTYPE_REPLYNOTUNDERSTOOD: 7,
  TRANSACTIONREPLYTYPE_LOCALFAILURE: 8
};

goog.object.extend(exports, proto.dynon);
